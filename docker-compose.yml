services:
  api:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: ghcr.io/contentautomator/distributorapi:v0.1.2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 1s
      timeout: 10s
      retries: 65
    restart: on-failure
    environment:
      REDIS_PORT: 6379
      REDIS_PASSWORD: uid-20241004072305
      REDIS_HOST: redis
      # KAFKA_BROKERS: kafka:9092
    command: ["yarn", "start:dev"]
    stop_grace_period: 1s
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./api/src/static/:/home/node/dist/static/:ro
      - ./api/dist/:/home/node/dist/:rw
      - ./api/src/:/home/node/src/:rw
      - ./composite-sequences/:/app/storage/images/composite-sequences/:rw
  test:
    image: curlimages/curl:latest
    command:
      [
        "sh",
        "-c",
        'curl -X POST http://api:3000/api/v1/render-video -H ''Content-Type: application/json'' -d ''{"prompt": "Sunset over the mountains"}''',
      ]
    depends_on:
      api:
        condition: service_healthy
  ws:
    # build:
    #   context: ./wscat/
    #   dockerfile: Dockerfile
    image: ghcr.io/qtvhao/wscat:master
    command: |
      bash -c "set -xeo pipefail; wscat -c ws://api:3000 -x 'message'"
    depends_on:
      api:
        condition: service_healthy
  client:
    image: nginx:alpine
    volumes:
      - ./client.html:/usr/share/nginx/html/index.html:ro
    ports:
      - "80:80"
    # depends_on:
    #   api:
    #     condition: service_healthy
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.7.1
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_SERVER_ID: 1
  #     ZOOKEEPER_SERVERS: zookeeper:2888:3888

  # kafka:
  #   image: confluentinc/cp-kafka:7.7.1
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #     - "9999:9999"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://kafka:9092,DOCKER://host.docker.internal:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_JMX_PORT: 9999
  #     KAFKA_JMX_HOSTNAME: "127.0.0.1"
  #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  #   healthcheck:
  #     test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
  #     interval: 1s
  #     timeout: 10s
  #     retries: 5
  #   depends_on:
  #     - zookeeper
  redis:
    image: bitnami/redis
    # ports:
    #   - "6379:6379"
    environment:
      REDIS_PASSWORD: uid-20241004072305
      # ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: ["CMD", "redis-cli", "ping -h redis"]
      interval: 1s
      timeout: 10s
      retries: 5
